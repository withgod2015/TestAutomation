# Generated by Selenium IDE
import pytest
import time
import json
import subprocess # Selenium chrome 실행시 "Chrome이 자동화된 테스트 소프트웨어에 의해 제어되고 있습니다." 자동화 메시지 제거
import os

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options

from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


# Chrome 실행 파일 경로
chrome_path = "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"

# 사용자 데이터 디렉토리 경로
user_data_dir = "D:\\chromeCookie";  

# 원격 디버깅 포트 설정
remote_debugging_port = "9222"

class TestDefaultSuite():
  def setup_method(self, method):
    # Chrome을 원격 디버깅 모드로 실행
    subprocess.Popen(
        [chrome_path, f"--remote-debugging-port={remote_debugging_port}", f"--user-data-dir={user_data_dir}"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        shell=True,
    )
    
    # WebDriver 설정
    chrome_service = Service()  # chromedriver가 PATH에 있어야 함
    options = Options()
    options.add_argument("--disable-notifications")
    options.add_argument("--disable-popup-blocking")
    options.add_argument("disable-blink-features=AutomationControlled")
    options.add_experimental_option("debuggerAddress", f"127.0.0.1:{remote_debugging_port}")
    options.headless = False  # Headless 모드 비활성화

    # WebDriver 생성
    self.driver = webdriver.Chrome(service=chrome_service, options=options)
    self.driver.implicitly_wait(10)  # 암묵적 대기 30초 설정
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_getofficeappdevloginlogout(self):
    # Test name: getoffice_app_dev_login_logout
    # Step # | name | target | value
    # 1 | open | /login | 
    # 계정관리 - 계정목록조회
    self.driver.get("https://testurl url removed for corporte security")

    # 쿠키 추가 후 새로고침하여 적용
    self.driver.refresh()
    # 2 | setWindowSize | 1213x1024 | 
    self.driver.set_window_size(1213, 1024)

    # 계정관리 - 계정 생성(일괄생성)
    # 3 | click | css=.text-left:nth-child(2) | 
    # xpath : /html/body/app-root/app-shell/div/div/div[1]/app-sidebar/div/div[1]/div/button[2]
    # select : body > app-root > app-shell > div > div > div.min-w-\[250px\].side--border.bottom--border.p-5 > app-sidebar > div > div:nth-child(1) > div > button:nth-child(2)
    # js : document.querySelector("body > app-root > app-shell > div > div > div.min-w-\\[250px\\].side--border.bottom--border.p-5 > app-sidebar > div > div:nth-child(1) > div > button:nth-child(2)")
    # self.driver.find_element(By.CSS_SELECTOR, ".text-left:nth-child(2)").click()

    try:
      # 타이머 추가 (2초 대기)
      time.sleep(2)

      # 요소가 DOM에 나타나는지 확인
      element = WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, ".text-left:nth-child(2)"))
      )
      # 클릭 가능 여부 확인
      element = WebDriverWait(self.driver, 10).until(
        #EC.element_to_be_clickable((By.XPATH, '//*[@id="otherTileText"]'))
        EC.element_to_be_clickable((By.CSS_SELECTOR, ".text-left:nth-child(2)"))
      )

      # 화면에 요소가 보이지 않는 경우 스크롤
      self.driver.execute_script("arguments[0].scrollIntoView(true);", element)

      # 요소 클릭
      element.click()
      print("계정생성(일괄생성) clicked successfully!")
    except Exception as e:
            print("Error locating 'text-left:nth-child(2)'", e)
            self.driver.save_screenshot("error_screenshot-계정생성(일괄생성).png")  # 디버깅용 스크린샷 저장
            raise e

    # 계정관리 - 계정 삭제 관리
    # 
    # /html/body/app-root/app-shell/div/div/div[1]/app-sidebar/div/div[1]/div/button[3]
    
    # 6 | click | css=.flex:nth-child(3) | 
    try:
      # 타이머 추가 (2초 대기)
      time.sleep(2)
      element = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, ".flex:nth-child(3)"))
      )
      # 요소 클릭
      element.click()
      print("계정 삭제 관리 clicked successfully!")
    except Exception as e:
            print("Error locating .flex:nth-child(3)", e)
            self.driver.save_screenshot("error_screenshot-계정 삭제 관리.png")  # 디버깅용 스크린샷 저장
            raise e
    
    
    # 라이선스 관리
    # 7 | click | css=div:nth-child(2) > .w-full > .flex > div | 
    #self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(2) > .w-full > .flex > div").click()
    try:
      # 타이머 추가 (2초 대기)
      time.sleep(2)
      element = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "div:nth-child(2) > .w-full > .flex > div"))
      )
      # 요소 클릭
      element.click()
      print("라이선스 관리 clicked successfully!")
    except Exception as e:
            print("Error locating .flex:nth-child(3)", e)
            self.driver.save_screenshot("error_screenshot-라이선스관리.png")  # 디버깅용 스크린샷 저장
            raise e
    
    
    # 디바이스 관리
    # 8 | click | css=div:nth-child(3) > .w-full > .flex > div | 
    #self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(3) > .w-full > .flex > div").click()
    try:
      # 타이머 추가 (2초 대기)
      time.sleep(2)
      
      # 요소가 DOM에 나타나는지 확인
      element = WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "div:nth-child(3) > .w-full > .flex > div"))
      )

      element = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "div:nth-child(3) > .w-full > .flex > div"))
      )
      # 요소 클릭
      element.click()
      print("디바이스 관리 clicked successfully!")
    except Exception as e:
            print("Error locating .flex:nth-child(3)", e)
            self.driver.save_screenshot("error_screenshot-디바이스관리.png")  # 디버깅용 스크린샷 저장
            raise e

    # 교직원 계정 승인
    # xpath : /html/body/app-root/app-shell/div/div/div[1]/app-sidebar/div/div[3]/button
    # xpath : /html/body/app-root/app-shell/div/div/div[1]/app-sidebar/div/div[3]/button/div/div
    # 10 | click | css=div:nth-child(4) > .w-full > .flex > div | 
    #self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(4) > .w-full > .flex > div").click()
    try:
      # 타이머 추가 (2초 대기)
      time.sleep(2)

      # 요소가 DOM에 나타나는지 확인
      element = WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "div:nth-child(4) > .w-full > .flex > div"))
      )

      element = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "div:nth-child(4) > .w-full > .flex > div"))
      )
      # 요소 클릭
      element.click()
      print("교직원 계정 승인 clicked successfully!")
    except Exception as e:
            print("Error locating div:nth-child(4) > .w-full > .flex > diver", e)
            self.driver.save_screenshot("error_screenshot-교직원 계정 승인.png")  # 디버깅용 스크린샷 저장
            raise e
    

    """
  def test_getofficeaccountcreate(self):
    # 계정관리 - 계정목록조회
    self.driver.get("https://testurl url removed for corporte security")

    # 쿠키 추가 후 새로고침하여 적용
    #self.driver.refresh()

    # 2 | setWindowSize | 1213x1024 | 
    #self.driver.set_window_size(1213, 1024)



    # 9 | click | css=.container | 
    #self.driver.find_element(By.CSS_SELECTOR, ".container").click()
    try:
      # 타이머 추가 (2초 대기)
      time.sleep(2)
      element = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, ".container"))
      )
      # 요소 클릭
      element.click()
      print("Element-2 clicked successfully!")
    except Exception as e:
            print("Error locating .container", e)
            self.driver.save_screenshot("error_screenshot-5.png")  # 디버깅용 스크린샷 저장
            raise e
    

    
    # 3 | click | css=.z-20 > span:nth-child(1) | 
    #self.driver.find_element(By.CSS_SELECTOR, ".z-20 > span:nth-child(1)").click()
     # 명시적 대기: 요소가 로드될 때까지 최대 10초 대기
     # /html/body/app-root/app-login-shell/div/div[1]/div/app-login/div/div[2]/div/div[1]/button
    element = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, ".z-20 > span:nth-child(1)"))  # 요소가 클릭 가능해질 때까지 대기
    )
    # 요소 클릭
    element.click()
    print("Element-1 clicked successfully!")
    self.driver.save_screenshot("D:\\error_screenshot-1.png")  # 디버깅용 스크린샷 저장
    #element.screenshot("element_screenshot-1.png")
    # 4 | click | id=otherTileText | 
    # 명시적 대기: XPath를 통해 요소가 나타날 때까지 최대 10초 대기
    try:
      element = WebDriverWait(self.driver, 10).until(
        #EC.element_to_be_clickable((By.XPATH, '//*[@id="otherTileText"]'))
        EC.element_to_be_clickable((By.ID, "otherTileText"))
      )
      # 요소 클릭
      element.click()
      print("Element-2 clicked successfully!")
    except Exception as e:
            print("Error locating 'otherTileText':", e)
            self.driver.save_screenshot("D:\\error_screenshot-2.png")  # 디버깅용 스크린샷 저장
            raise e
    
    # 5 | type | id=i0116 | ui-tester@headit.co.kr
    self.driver.find_element(By.ID, "i0116").send_keys("ui-tester@headit.co.kr")
    # 6 | click | id=idSIButton9 | 
    self.driver.find_element(By.ID, "idSIButton9").click()
    # 7 | mouseOver | id=idSIButton9 | 
    element = self.driver.find_element(By.ID, "idSIButton9")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 8 | click | id=i0118 | 
    self.driver.find_element(By.ID, "i0118").click()
    # 9 | click | id=i0118 | 
    self.driver.find_element(By.ID, "i0118").click()
    # 10 | type | id=i0118 | dusrnthP@ssw0rd
    self.driver.find_element(By.ID, "i0118").send_keys("dusrnthP@ssw0rd")
    # 11 | click | id=idSIButton9 | 
    self.driver.find_element(By.ID, "idSIButton9").click()
    # 12 | mouseOver | id=idSIButton9 | 
    element = self.driver.find_element(By.ID, "idSIButton9")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 13 | mouseOut | id=idSIButton9 | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 14 | click | id=idBtn_Back | 
    self.driver.find_element(By.ID, "idBtn_Back").click()
    # 15 | click | css=.text-left:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, ".text-left:nth-child(2)").click()
    # 16 | click | css=.flex:nth-child(3) | 
    self.driver.find_element(By.CSS_SELECTOR, ".flex:nth-child(3)").click()
    # 17 | click | css=div:nth-child(2) > .w-full > .flex > div | 
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(2) > .w-full > .flex > div").click()
    # 18 | click | css=div:nth-child(3) > .w-full > .flex > div | 
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(3) > .w-full > .flex > div").click()
    # 19 | click | css=div:nth-child(4) > .w-full > .flex > div | 
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(4) > .w-full > .flex > div").click()
    # 20 | click | css=.ml-auto | 
    self.driver.find_element(By.CSS_SELECTOR, ".ml-auto").click()
    """
